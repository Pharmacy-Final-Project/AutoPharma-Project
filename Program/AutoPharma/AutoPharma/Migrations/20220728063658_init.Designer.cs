// <auto-generated />
using System;
using AutoPharma.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AutoPharma.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220728063658_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AutoPharma.Auth.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AutoPharma.Auth.Model.DTO.PharmacistUserDTO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PharmacistUserDTO");
                });

            modelBuilder.Entity("AutoPharma.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Amman Street",
                            CityId = 1,
                            Phone = "1000"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Abdon",
                            CityId = 1,
                            Phone = "1200"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Marka",
                            CityId = 1,
                            Phone = "1300"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Sweleh",
                            CityId = 1,
                            Phone = "1400"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Al-sabea",
                            CityId = 1,
                            Phone = "1500"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Al-thamin",
                            CityId = 1,
                            Phone = "1600"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Irbid Street",
                            CityId = 3,
                            Phone = "2100"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Albalad",
                            CityId = 3,
                            Phone = "2200"
                        },
                        new
                        {
                            Id = 9,
                            Address = "AL-ramtha",
                            CityId = 3,
                            Phone = "2300"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Sal",
                            CityId = 3,
                            Phone = "2400"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Irbid Street",
                            CityId = 3,
                            Phone = "2500"
                        });
                });

            modelBuilder.Entity("AutoPharma.Models.BranchMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<double>("OurPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MedicineId");

                    b.ToTable("BranchMedicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Count = 73,
                            LocationId = 1,
                            MedicineId = 1,
                            OurPrice = 3.75
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            Count = 120,
                            LocationId = 5,
                            MedicineId = 1,
                            OurPrice = 3.75
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            Count = 99,
                            LocationId = 6,
                            MedicineId = 3,
                            OurPrice = 4.9500000000000002
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 2,
                            Count = 55,
                            LocationId = 2,
                            MedicineId = 3,
                            OurPrice = 4.9500000000000002
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 4,
                            Count = 55,
                            LocationId = 5,
                            MedicineId = 3,
                            OurPrice = 4.9500000000000002
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 1,
                            Count = 85,
                            LocationId = 2,
                            MedicineId = 3,
                            OurPrice = 4.9500000000000002
                        },
                        new
                        {
                            Id = 7,
                            BranchId = 11,
                            Count = 53,
                            LocationId = 1,
                            MedicineId = 9,
                            OurPrice = 9.8000000000000007
                        },
                        new
                        {
                            Id = 8,
                            BranchId = 5,
                            Count = 73,
                            LocationId = 8,
                            MedicineId = 9,
                            OurPrice = 9.8000000000000007
                        },
                        new
                        {
                            Id = 9,
                            BranchId = 3,
                            Count = 76,
                            LocationId = 4,
                            MedicineId = 9,
                            OurPrice = 9.8000000000000007
                        },
                        new
                        {
                            Id = 10,
                            BranchId = 9,
                            Count = 13,
                            LocationId = 9,
                            MedicineId = 9,
                            OurPrice = 9.8000000000000007
                        },
                        new
                        {
                            Id = 11,
                            BranchId = 1,
                            Count = 73,
                            LocationId = 1,
                            MedicineId = 8,
                            OurPrice = 1.1000000000000001
                        },
                        new
                        {
                            Id = 12,
                            BranchId = 4,
                            Count = 55,
                            LocationId = 6,
                            MedicineId = 8,
                            OurPrice = 1.1000000000000001
                        },
                        new
                        {
                            Id = 13,
                            BranchId = 2,
                            Count = 66,
                            LocationId = 5,
                            MedicineId = 8,
                            OurPrice = 1.1000000000000001
                        },
                        new
                        {
                            Id = 14,
                            BranchId = 7,
                            Count = 44,
                            LocationId = 3,
                            MedicineId = 8,
                            OurPrice = 1.1000000000000001
                        },
                        new
                        {
                            Id = 15,
                            BranchId = 1,
                            Count = 76,
                            LocationId = 1,
                            MedicineId = 7,
                            OurPrice = 4.7000000000000002
                        },
                        new
                        {
                            Id = 16,
                            BranchId = 6,
                            Count = 88,
                            LocationId = 2,
                            MedicineId = 7,
                            OurPrice = 4.7000000000000002
                        },
                        new
                        {
                            Id = 17,
                            BranchId = 3,
                            Count = 63,
                            LocationId = 3,
                            MedicineId = 7,
                            OurPrice = 4.7000000000000002
                        },
                        new
                        {
                            Id = 18,
                            BranchId = 4,
                            Count = 56,
                            LocationId = 4,
                            MedicineId = 7,
                            OurPrice = 4.7000000000000002
                        },
                        new
                        {
                            Id = 19,
                            BranchId = 1,
                            Count = 44,
                            LocationId = 1,
                            MedicineId = 6,
                            OurPrice = 2.6000000000000001
                        },
                        new
                        {
                            Id = 20,
                            BranchId = 2,
                            Count = 85,
                            LocationId = 6,
                            MedicineId = 6,
                            OurPrice = 2.6000000000000001
                        },
                        new
                        {
                            Id = 21,
                            BranchId = 7,
                            Count = 3,
                            LocationId = 8,
                            MedicineId = 6,
                            OurPrice = 2.6000000000000001
                        },
                        new
                        {
                            Id = 22,
                            BranchId = 8,
                            Count = 6,
                            LocationId = 2,
                            MedicineId = 6,
                            OurPrice = 2.6000000000000001
                        },
                        new
                        {
                            Id = 23,
                            BranchId = 1,
                            Count = 99,
                            LocationId = 1,
                            MedicineId = 5,
                            OurPrice = 1.6000000000000001
                        },
                        new
                        {
                            Id = 24,
                            BranchId = 4,
                            Count = 53,
                            LocationId = 2,
                            MedicineId = 5,
                            OurPrice = 1.6000000000000001
                        },
                        new
                        {
                            Id = 25,
                            BranchId = 2,
                            Count = 44,
                            LocationId = 3,
                            MedicineId = 5,
                            OurPrice = 1.6000000000000001
                        },
                        new
                        {
                            Id = 26,
                            BranchId = 3,
                            Count = 66,
                            LocationId = 5,
                            MedicineId = 5,
                            OurPrice = 1.6000000000000001
                        },
                        new
                        {
                            Id = 27,
                            BranchId = 5,
                            Count = 62,
                            LocationId = 6,
                            MedicineId = 5,
                            OurPrice = 1.6000000000000001
                        },
                        new
                        {
                            Id = 28,
                            BranchId = 4,
                            Count = 74,
                            LocationId = 8,
                            MedicineId = 5,
                            OurPrice = 1.6000000000000001
                        },
                        new
                        {
                            Id = 29,
                            BranchId = 1,
                            Count = 7,
                            LocationId = 1,
                            MedicineId = 4,
                            OurPrice = 6.9500000000000002
                        },
                        new
                        {
                            Id = 30,
                            BranchId = 11,
                            Count = 8,
                            LocationId = 2,
                            MedicineId = 4,
                            OurPrice = 6.9500000000000002
                        },
                        new
                        {
                            Id = 31,
                            BranchId = 2,
                            Count = 5,
                            LocationId = 3,
                            MedicineId = 4,
                            OurPrice = 6.9500000000000002
                        },
                        new
                        {
                            Id = 32,
                            BranchId = 4,
                            Count = 2,
                            LocationId = 2,
                            MedicineId = 4,
                            OurPrice = 6.9500000000000002
                        },
                        new
                        {
                            Id = 33,
                            BranchId = 2,
                            Count = 8,
                            LocationId = 3,
                            MedicineId = 4,
                            OurPrice = 6.9500000000000002
                        },
                        new
                        {
                            Id = 34,
                            BranchId = 3,
                            Count = 9,
                            LocationId = 7,
                            MedicineId = 4,
                            OurPrice = 6.9500000000000002
                        },
                        new
                        {
                            Id = 35,
                            BranchId = 1,
                            Count = 7,
                            LocationId = 1,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 36,
                            BranchId = 2,
                            Count = 5,
                            LocationId = 2,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 37,
                            BranchId = 4,
                            Count = 183,
                            LocationId = 3,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 38,
                            BranchId = 11,
                            Count = 3,
                            LocationId = 4,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 39,
                            BranchId = 1,
                            Count = 6,
                            LocationId = 5,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 40,
                            BranchId = 5,
                            Count = 12,
                            LocationId = 6,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 41,
                            BranchId = 3,
                            Count = 14,
                            LocationId = 7,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 42,
                            BranchId = 6,
                            Count = 14,
                            LocationId = 8,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 43,
                            BranchId = 8,
                            Count = 2,
                            LocationId = 9,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        },
                        new
                        {
                            Id = 44,
                            BranchId = 9,
                            Count = 6,
                            LocationId = 10,
                            MedicineId = 2,
                            OurPrice = 17.649999999999999
                        });
                });

            modelBuilder.Entity("AutoPharma.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Amman"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Zarqa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Irbid"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Aqaba"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Maadaba"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Al-Balqaa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mafraq"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Jerash"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ma'an"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Al-Tafila"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Al-Karak"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ajloun"
                        });
                });

            modelBuilder.Entity("AutoPharma.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Cabinet")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Shelf")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Cabinet = "A",
                            Shelf = 1
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Cabinet = "A",
                            Shelf = 2
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            Cabinet = "A",
                            Shelf = 3
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 1,
                            Cabinet = "A",
                            Shelf = 4
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 1,
                            Cabinet = "A",
                            Shelf = 5
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 1,
                            Cabinet = "B",
                            Shelf = 1
                        },
                        new
                        {
                            Id = 7,
                            BranchId = 1,
                            Cabinet = "B",
                            Shelf = 2
                        },
                        new
                        {
                            Id = 8,
                            BranchId = 1,
                            Cabinet = "B",
                            Shelf = 3
                        },
                        new
                        {
                            Id = 9,
                            BranchId = 1,
                            Cabinet = "B",
                            Shelf = 4
                        },
                        new
                        {
                            Id = 10,
                            BranchId = 1,
                            Cabinet = "B",
                            Shelf = 5
                        },
                        new
                        {
                            Id = 11,
                            BranchId = 2,
                            Cabinet = "A",
                            Shelf = 1
                        },
                        new
                        {
                            Id = 12,
                            BranchId = 2,
                            Cabinet = "A",
                            Shelf = 2
                        },
                        new
                        {
                            Id = 13,
                            BranchId = 2,
                            Cabinet = "A",
                            Shelf = 3
                        },
                        new
                        {
                            Id = 14,
                            BranchId = 2,
                            Cabinet = "A",
                            Shelf = 4
                        },
                        new
                        {
                            Id = 15,
                            BranchId = 2,
                            Cabinet = "A",
                            Shelf = 5
                        },
                        new
                        {
                            Id = 16,
                            BranchId = 2,
                            Cabinet = "B",
                            Shelf = 1
                        },
                        new
                        {
                            Id = 17,
                            BranchId = 2,
                            Cabinet = "B",
                            Shelf = 2
                        },
                        new
                        {
                            Id = 18,
                            BranchId = 2,
                            Cabinet = "B",
                            Shelf = 3
                        },
                        new
                        {
                            Id = 19,
                            BranchId = 2,
                            Cabinet = "B",
                            Shelf = 4
                        },
                        new
                        {
                            Id = 20,
                            BranchId = 2,
                            Cabinet = "B",
                            Shelf = 5
                        });
                });

            modelBuilder.Entity("AutoPharma.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MOHPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dose = "250",
                            ExpiredDate = new DateTime(2023, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/panadol.jpg",
                            Information = "This medicine is used as a painkiller",
                            MOHPrice = 3.5,
                            Name = "Panadol"
                        },
                        new
                        {
                            Id = 2,
                            Dose = "500",
                            ExpiredDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/Penicillin.jpg",
                            Information = "This medicine is used as a antibiotic",
                            MOHPrice = 17.649999999999999,
                            Name = "Penicillin "
                        },
                        new
                        {
                            Id = 3,
                            Dose = "180",
                            ExpiredDate = new DateTime(2026, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/FEXON.jpg",
                            Information = "This medicine is used as a Anti-allergic",
                            MOHPrice = 4.9500000000000002,
                            Name = "FEXON"
                        },
                        new
                        {
                            Id = 4,
                            Dose = "220",
                            ExpiredDate = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/DIAXSUSP.jpg",
                            Information = "This medicine is used as a 	Intestinal antiseptic",
                            MOHPrice = 6.9500000000000002,
                            Name = "DIAX SUSP"
                        },
                        new
                        {
                            Id = 5,
                            Dose = "200",
                            ExpiredDate = new DateTime(2027, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/Zithrokan.jpg",
                            Information = "This medicine is used as a Antibiotics",
                            MOHPrice = 1.2,
                            Name = "Zithrokan"
                        },
                        new
                        {
                            Id = 6,
                            Dose = "500",
                            ExpiredDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/Alvedon.jpg",
                            Information = "This medicine is used as a antipyretic",
                            MOHPrice = 2.6000000000000001,
                            Name = "Alvedon"
                        },
                        new
                        {
                            Id = 7,
                            Dose = "250",
                            ExpiredDate = new DateTime(2025, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/cyclease.jpg",
                            Information = "This medicine is used for cramps",
                            MOHPrice = 4.7000000000000002,
                            Name = "cyclease"
                        },
                        new
                        {
                            Id = 8,
                            Dose = "400",
                            ExpiredDate = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/DAYQUIL1.jpg",
                            Information = "This medicine is used for cold",
                            MOHPrice = 1.1000000000000001,
                            Name = "DAYQUIL"
                        },
                        new
                        {
                            Id = 9,
                            Dose = "200",
                            ExpiredDate = new DateTime(2027, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUri = "https://autopharmafinal.blob.core.windows.net/images/Excedrin.jpg",
                            Information = "This medicine is used for headache",
                            MOHPrice = 9.8000000000000007,
                            Name = "Excedrin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AutoPharma.Auth.Model.ApplicationUser", b =>
                {
                    b.HasOne("AutoPharma.Models.Branch", null)
                        .WithMany("Pharmacists")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("AutoPharma.Models.Branch", b =>
                {
                    b.HasOne("AutoPharma.Models.City", null)
                        .WithMany("Branches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoPharma.Models.BranchMedicine", b =>
                {
                    b.HasOne("AutoPharma.Models.Branch", "Branch")
                        .WithMany("BranchMedicines")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoPharma.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoPharma.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Location");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoPharma.Auth.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoPharma.Auth.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoPharma.Auth.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoPharma.Auth.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoPharma.Models.Branch", b =>
                {
                    b.Navigation("BranchMedicines");

                    b.Navigation("Pharmacists");
                });

            modelBuilder.Entity("AutoPharma.Models.City", b =>
                {
                    b.Navigation("Branches");
                });
#pragma warning restore 612, 618
        }
    }
}
